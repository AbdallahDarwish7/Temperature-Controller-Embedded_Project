
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6e  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076a  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059d  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00001b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049f  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000464  00000000  00000000  0000214b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000025af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 44 00 	call	0x88	; 0x88 <main>
  7a:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <test>:
//
#include "SPI.h"
#include "TC72.h"

void test(void){
    SPI_initMaster();
  82:	0e 94 67 00 	call	0xce	; 0xce <SPI_initMaster>
  86:	08 95       	ret

00000088 <main>:
#include "TC72.h"

int main(void)
{
    /* Replace with your application code */
	test();
  88:	0e 94 41 00 	call	0x82	; 0x82 <test>
  8c:	ff cf       	rjmp	.-2      	; 0x8c <main+0x4>

0000008e <DIO_ChannelDir>:
    return Result;
}

DIO_CheckType DIO_ChannelDir(unsigned char PortId, unsigned char ChannelId, unsigned char Direction) {
    DIO_CheckType Result;
    if (PortId < DIO_NUM_OF_PORTS) {
  8e:	84 30       	cpi	r24, 0x04	; 4
  90:	d0 f4       	brcc	.+52     	; 0xc6 <DIO_ChannelDir+0x38>
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
  92:	68 30       	cpi	r22, 0x08	; 8
  94:	d0 f4       	brcc	.+52     	; 0xca <DIO_ChannelDir+0x3c>
            DDR_REG(PortId) &= ~(1 << ChannelId);
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	e0 5a       	subi	r30, 0xA0	; 160
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	e0 81       	ld	r30, Z
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	22 91       	ld	r18, -Z
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_ChannelDir+0x20>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_ChannelDir+0x1c>
  b2:	98 2f       	mov	r25, r24
  b4:	90 95       	com	r25
  b6:	92 23       	and	r25, r18
  b8:	90 83       	st	Z, r25
            DDR_REG(PortId) |= ((1 << ChannelId) & Direction);
  ba:	90 81       	ld	r25, Z
  bc:	84 23       	and	r24, r20
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
            Result = DIO_OK;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	08 95       	ret
        } else{
            Result = DIO_NOK;
        }
    } else {
        Result = DIO_NOK;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	08 95       	ret
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
            DDR_REG(PortId) &= ~(1 << ChannelId);
            DDR_REG(PortId) |= ((1 << ChannelId) & Direction);
            Result = DIO_OK;
        } else{
            Result = DIO_NOK;
  ca:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        Result = DIO_NOK;
    }
    return Result;
}
  cc:	08 95       	ret

000000ce <SPI_initMaster>:
     * SS(PB4)   --> Output
     * MOSI(PB5) --> Output
     * MISO(PB6) --> Input
     * SCK(PB7) --> Output
     ********************************************/
    DIO_ChannelDir(1, 4, 0xff);
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	64 e0       	ldi	r22, 0x04	; 4
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 47 00 	call	0x8e	; 0x8e <DIO_ChannelDir>
    DIO_ChannelDir(1, 5, 0xff);
  d8:	4f ef       	ldi	r20, 0xFF	; 255
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 47 00 	call	0x8e	; 0x8e <DIO_ChannelDir>
    DIO_ChannelDir(1, 6, 0x00);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	66 e0       	ldi	r22, 0x06	; 6
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 47 00 	call	0x8e	; 0x8e <DIO_ChannelDir>
    DIO_ChannelDir(1, 7, 0xff);
  ec:	4f ef       	ldi	r20, 0xFF	; 255
  ee:	67 e0       	ldi	r22, 0x07	; 7
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 47 00 	call	0x8e	; 0x8e <DIO_ChannelDir>
    SPCR = (1<<SPE) | (1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
  f6:	80 e5       	ldi	r24, 0x50	; 80
  f8:	8d b9       	out	0x0d, r24	; 13
  fa:	08 95       	ret

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>

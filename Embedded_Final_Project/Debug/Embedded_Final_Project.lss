
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000330  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00000330  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001370  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000957  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000817  00000000  00000000  00002297  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  00002ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005fa  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000092a  00000000  00000000  000032e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3e       	cpi	r26, 0xE6	; 230
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 38 01 	call	0x270	; 0x270 <main>
  7a:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Write_Data>:
	{
		LCD_Command (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
		LCD_Char(msg[i]);
	}
}
  82:	df 92       	push	r13
  84:	ef 92       	push	r14
  86:	ff 92       	push	r15
  88:	0f 93       	push	r16
  8a:	1f 93       	push	r17
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	0a e7       	ldi	r16, 0x7A	; 122
  92:	10 e0       	ldi	r17, 0x00	; 0
  94:	c0 e0       	ldi	r28, 0x00	; 0
  96:	d0 e0       	ldi	r29, 0x00	; 0
  98:	e8 2e       	mov	r14, r24
  9a:	f1 2c       	mov	r15, r1
  9c:	d0 90 79 00 	lds	r13, 0x0079	; 0x800079 <LCD_ConfigParam+0x4>
  a0:	f8 01       	movw	r30, r16
  a2:	61 91       	ld	r22, Z+
  a4:	8f 01       	movw	r16, r30
  a6:	a7 01       	movw	r20, r14
  a8:	0c 2e       	mov	r0, r28
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <LCD_Write_Data+0x2e>
  ac:	55 95       	asr	r21
  ae:	47 95       	ror	r20
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <LCD_Write_Data+0x2a>
  b4:	41 70       	andi	r20, 0x01	; 1
  b6:	41 95       	neg	r20
  b8:	8d 2d       	mov	r24, r13
  ba:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_ChannelWrite>
  be:	21 96       	adiw	r28, 0x01	; 1
  c0:	c8 30       	cpi	r28, 0x08	; 8
  c2:	d1 05       	cpc	r29, r1
  c4:	69 f7       	brne	.-38     	; 0xa0 <LCD_Write_Data+0x1e>
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	1f 91       	pop	r17
  cc:	0f 91       	pop	r16
  ce:	ff 90       	pop	r15
  d0:	ef 90       	pop	r14
  d2:	df 90       	pop	r13
  d4:	08 95       	ret

000000d6 <LCD_RS_Command>:
  d6:	e5 e7       	ldi	r30, 0x75	; 117
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	61 81       	ldd	r22, Z+1	; 0x01
  de:	80 81       	ld	r24, Z
  e0:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_ChannelWrite>
  e4:	08 95       	ret

000000e6 <LCD_RS_Reg>:
  e6:	e5 e7       	ldi	r30, 0x75	; 117
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	4f ef       	ldi	r20, 0xFF	; 255
  ec:	61 81       	ldd	r22, Z+1	; 0x01
  ee:	80 81       	ld	r24, Z
  f0:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_ChannelWrite>
  f4:	08 95       	ret

000000f6 <LCD_Write_Operation>:
  f6:	e5 e7       	ldi	r30, 0x75	; 117
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	62 81       	ldd	r22, Z+2	; 0x02
  fe:	80 81       	ld	r24, Z
 100:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_ChannelWrite>
 104:	08 95       	ret

00000106 <LCD_Enable>:
 106:	e5 e7       	ldi	r30, 0x75	; 117
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	4f ef       	ldi	r20, 0xFF	; 255
 10c:	63 81       	ldd	r22, Z+3	; 0x03
 10e:	80 81       	ld	r24, Z
 110:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_ChannelWrite>
 114:	08 95       	ret

00000116 <LCD_Disable>:
 116:	e5 e7       	ldi	r30, 0x75	; 117
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	63 81       	ldd	r22, Z+3	; 0x03
 11e:	80 81       	ld	r24, Z
 120:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_ChannelWrite>
 124:	08 95       	ret

00000126 <LCD_Command>:
 126:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Write_Data>
 12a:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_RS_Command>
 12e:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Write_Operation>
 132:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Enable>
 136:	00 00       	nop
 138:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Disable>
 13c:	83 ef       	ldi	r24, 0xF3	; 243
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_Command+0x1a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_Command+0x20>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <LCD_Char>:
 14a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Write_Data>
 14e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_RS_Reg>
 152:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Write_Operation>
 156:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Enable>
 15a:	00 00       	nop
 15c:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Disable>
 160:	83 ef       	ldi	r24, 0xF3	; 243
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_Char+0x1a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_Char+0x20>
 16a:	00 00       	nop
 16c:	08 95       	ret

0000016e <LCD_Init>:
 16e:	87 e8       	ldi	r24, 0x87	; 135
 170:	93 e1       	ldi	r25, 0x13	; 19
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_Init+0x4>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_Init+0xa>
 178:	00 00       	nop
 17a:	88 e3       	ldi	r24, 0x38	; 56
 17c:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 180:	8c e0       	ldi	r24, 0x0C	; 12
 182:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 192:	83 ef       	ldi	r24, 0xF3	; 243
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Init+0x28>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Init+0x2e>
 19c:	00 00       	nop
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 1a4:	08 95       	ret

000001a6 <LCD_String>:
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
 1ac:	88 81       	ld	r24, Y
 1ae:	88 23       	and	r24, r24
 1b0:	31 f0       	breq	.+12     	; 0x1be <LCD_String+0x18>
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Char>
 1b8:	89 91       	ld	r24, Y+
 1ba:	81 11       	cpse	r24, r1
 1bc:	fb cf       	rjmp	.-10     	; 0x1b4 <LCD_String+0xe>
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <test_LCD>:

void test_LCD(void) {
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	28 97       	sbiw	r28, 0x08	; 8
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61
	unsigned char loop;

	uint8 Characters[8] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h' };
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	e0 e6       	ldi	r30, 0x60	; 96
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	de 01       	movw	r26, r28
 1e8:	11 96       	adiw	r26, 0x01	; 1
 1ea:	01 90       	ld	r0, Z+
 1ec:	0d 92       	st	X+, r0
 1ee:	8a 95       	dec	r24
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <test_LCD+0x26>

	DIO_Init(2);
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_Init>
	DIO_Init(3);
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_Init>
	LCD_Init();
 1fe:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_Init>
	LCD_Command(0x80);
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	LCD_String(" ");
 208:	88 e6       	ldi	r24, 0x68	; 104
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
}

void LCD_String_xy (uint8 row, uint8 pos, uint8 *str)  /* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	else if (row == (uint8)1 && pos<(uint8)16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
 216:	8a e6       	ldi	r24, 0x6A	; 106
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
}

void LCD_String_xy (uint8 row, uint8 pos, uint8 *str)  /* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 21e:	8c e8       	ldi	r24, 0x8C	; 140
 220:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	else if (row == (uint8)1 && pos<(uint8)16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
 224:	80 e7       	ldi	r24, 0x70	; 112
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
	LCD_Init();
	LCD_Command(0x80);
	LCD_String(" ");
	LCD_String_xy(0, (uint8)0,"HELLO");
	LCD_String_xy(0, (uint8)12,"KIMO");
	LCD_Command(0xc0);
 22c:	80 ec       	ldi	r24, 0xC0	; 192
 22e:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 232:	8e 01       	movw	r16, r28
 234:	0f 5f       	subi	r16, 0xFF	; 255
 236:	1f 4f       	sbci	r17, 0xFF	; 255
 238:	7e 01       	movw	r14, r28
 23a:	89 e0       	ldi	r24, 0x09	; 9
 23c:	e8 0e       	add	r14, r24
 23e:	f1 1c       	adc	r15, r1
	
	for (loop = (uint8)0; loop < (uint8)8; loop++)
	{
		LCD_Char(Characters[loop]);
 240:	f8 01       	movw	r30, r16
 242:	81 91       	ld	r24, Z+
 244:	8f 01       	movw	r16, r30
 246:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Char>
		LCD_Char(' ');
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Char>
	LCD_String(" ");
	LCD_String_xy(0, (uint8)0,"HELLO");
	LCD_String_xy(0, (uint8)12,"KIMO");
	LCD_Command(0xc0);
	
	for (loop = (uint8)0; loop < (uint8)8; loop++)
 250:	e0 16       	cp	r14, r16
 252:	f1 06       	cpc	r15, r17
 254:	a9 f7       	brne	.-22     	; 0x240 <test_LCD+0x7c>
	{
		LCD_Char(Characters[loop]);
		LCD_Char(' ');
		
	}
 256:	28 96       	adiw	r28, 0x08	; 8
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	08 95       	ret

00000270 <main>:

int main(void)
{
    /* Replace with your application code */
	
	test_LCD();
 270:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <test_LCD>
 274:	ff cf       	rjmp	.-2      	; 0x274 <main+0x4>

00000276 <DIO_Init>:
        }
    } else {
        Result = DIO_NOK;
    }
    return Result;
}
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	84 30       	cpi	r24, 0x04	; 4
 27c:	98 f5       	brcc	.+102    	; 0x2e4 <DIO_Init+0x6e>
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	ee 57       	subi	r30, 0x7E	; 126
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	a0 81       	ld	r26, Z
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	ed 01       	movw	r28, r26
 28c:	21 97       	sbiw	r28, 0x01	; 1
 28e:	fc 01       	movw	r30, r24
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	e8 0f       	add	r30, r24
 296:	f9 1f       	adc	r31, r25
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	ea 57       	subi	r30, 0x7A	; 122
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	48 e0       	ldi	r20, 0x08	; 8
 2aa:	88 81       	ld	r24, Y
 2ac:	30 81       	ld	r19, Z
 2ae:	93 2f       	mov	r25, r19
 2b0:	90 95       	com	r25
 2b2:	89 23       	and	r24, r25
 2b4:	88 83       	st	Y, r24
 2b6:	28 81       	ld	r18, Y
 2b8:	81 81       	ldd	r24, Z+1	; 0x01
 2ba:	53 2f       	mov	r21, r19
 2bc:	58 23       	and	r21, r24
 2be:	25 2b       	or	r18, r21
 2c0:	28 83       	st	Y, r18
 2c2:	2c 91       	ld	r18, X
 2c4:	98 2b       	or	r25, r24
 2c6:	92 23       	and	r25, r18
 2c8:	9c 93       	st	X, r25
 2ca:	9c 91       	ld	r25, X
 2cc:	22 81       	ldd	r18, Z+2	; 0x02
 2ce:	23 23       	and	r18, r19
 2d0:	80 95       	com	r24
 2d2:	82 23       	and	r24, r18
 2d4:	89 2b       	or	r24, r25
 2d6:	8c 93       	st	X, r24
 2d8:	41 50       	subi	r20, 0x01	; 1
 2da:	33 96       	adiw	r30, 0x03	; 3
 2dc:	41 11       	cpse	r20, r1
 2de:	e5 cf       	rjmp	.-54     	; 0x2aa <DIO_Init+0x34>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <DIO_Init+0x70>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <DIO_ChannelWrite>:


DIO_CheckType DIO_ChannelWrite(uint8 PortId, uint8 ChannelId, uint8 Data) {
    /*Add your code*/
    DIO_CheckType Result;
    if (PortId < DIO_NUM_OF_PORTS) {
 2ec:	84 30       	cpi	r24, 0x04	; 4
 2ee:	d0 f4       	brcc	.+52     	; 0x324 <DIO_ChannelWrite+0x38>
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
 2f0:	68 30       	cpi	r22, 0x08	; 8
 2f2:	d0 f4       	brcc	.+52     	; 0x328 <DIO_ChannelWrite+0x3c>
            PORT_REG(PortId) &= ~(1 << ChannelId);
 2f4:	e8 2f       	mov	r30, r24
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ee 57       	subi	r30, 0x7E	; 126
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	e0 81       	ld	r30, Z
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	20 81       	ld	r18, Z
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_ChannelWrite+0x20>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_ChannelWrite+0x1c>
 310:	98 2f       	mov	r25, r24
 312:	90 95       	com	r25
 314:	92 23       	and	r25, r18
 316:	90 83       	st	Z, r25
            PORT_REG(PortId) |= (1 << ChannelId) & Data;
 318:	90 81       	ld	r25, Z
 31a:	84 23       	and	r24, r20
 31c:	89 2b       	or	r24, r25
 31e:	80 83       	st	Z, r24
            Result = DIO_OK;
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	08 95       	ret
        } else{
            Result = DIO_NOK;
        }
    } else {
        Result = DIO_NOK;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	08 95       	ret
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
            PORT_REG(PortId) &= ~(1 << ChannelId);
            PORT_REG(PortId) |= (1 << ChannelId) & Data;
            Result = DIO_OK;
        } else{
            Result = DIO_NOK;
 328:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        Result = DIO_NOK;
    }
    return Result;
}
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>

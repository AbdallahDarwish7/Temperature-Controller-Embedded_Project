
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000492  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00000492  00000506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bce  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b53  00000000  00000000  00002392  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd8  00000000  00000000  00002ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000033c  00000000  00000000  00003ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000717  00000000  00000000  00003dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dba  00000000  00000000  00004513  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000052cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 32       	cpi	r26, 0x22	; 34
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  7a:	0c 94 47 02 	jmp	0x48e	; 0x48e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CheckBit>:
void LCD_RS_Reg() {
	DIO_ChannelWrite(LCD_ConfigParam.ControlPortId, LCD_ConfigParam.RSPinChannel, 0xff);
}

void LCD_Read_Operation() {
	DIO_ChannelWrite(LCD_ConfigParam.ControlPortId, LCD_ConfigParam.RWPinChannel, 0xff);
  82:	e6 2f       	mov	r30, r22
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	e6 59       	subi	r30, 0x96	; 150
  88:	ff 4f       	sbci	r31, 0xFF	; 255
  8a:	e5 81       	ldd	r30, Z+5	; 0x05
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <LCD_ConfigParam+0x4>
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	af 01       	movw	r20, r30
  96:	44 0f       	add	r20, r20
  98:	55 1f       	adc	r21, r21
  9a:	e4 0f       	add	r30, r20
  9c:	f5 1f       	adc	r31, r21
  9e:	a9 01       	movw	r20, r18
  a0:	44 0f       	add	r20, r20
  a2:	55 1f       	adc	r21, r21
  a4:	24 0f       	add	r18, r20
  a6:	35 1f       	adc	r19, r21
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	e2 0f       	add	r30, r18
  b6:	f3 1f       	adc	r31, r19
  b8:	ef 53       	subi	r30, 0x3F	; 63
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	90 81       	ld	r25, Z
  be:	98 23       	and	r25, r24
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	09 f4       	brne	.+2      	; 0xc6 <CheckBit+0x44>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	81 95       	neg	r24
  c8:	08 95       	ret

000000ca <LCD_Write_Upper>:
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	f8 2e       	mov	r15, r24
  d8:	0f e6       	ldi	r16, 0x6F	; 111
  da:	10 e0       	ldi	r17, 0x00	; 0
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 91 6e 00 	lds	r29, 0x006E	; 0x80006e <LCD_ConfigParam+0x4>
  e2:	6c 2f       	mov	r22, r28
  e4:	8f 2d       	mov	r24, r15
  e6:	0e 94 41 00 	call	0x82	; 0x82 <CheckBit>
  ea:	f8 01       	movw	r30, r16
  ec:	61 91       	ld	r22, Z+
  ee:	8f 01       	movw	r16, r30
  f0:	48 2f       	mov	r20, r24
  f2:	8d 2f       	mov	r24, r29
  f4:	0e 94 27 02 	call	0x44e	; 0x44e <DIO_ChannelWrite>
  f8:	cf 5f       	subi	r28, 0xFF	; 255
  fa:	c8 30       	cpi	r28, 0x08	; 8
  fc:	91 f7       	brne	.-28     	; 0xe2 <LCD_Write_Upper+0x18>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	ff 90       	pop	r15
 108:	08 95       	ret

0000010a <LCD_Write_Lower>:
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	f8 2e       	mov	r15, r24
 116:	ff 0c       	add	r15, r15
 118:	ff 0c       	add	r15, r15
 11a:	ff 0c       	add	r15, r15
 11c:	ff 0c       	add	r15, r15
 11e:	0f e6       	ldi	r16, 0x6F	; 111
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 91 6e 00 	lds	r29, 0x006E	; 0x80006e <LCD_ConfigParam+0x4>
 128:	6c 2f       	mov	r22, r28
 12a:	8f 2d       	mov	r24, r15
 12c:	0e 94 41 00 	call	0x82	; 0x82 <CheckBit>
 130:	f8 01       	movw	r30, r16
 132:	61 91       	ld	r22, Z+
 134:	8f 01       	movw	r16, r30
 136:	48 2f       	mov	r20, r24
 138:	8d 2f       	mov	r24, r29
 13a:	0e 94 27 02 	call	0x44e	; 0x44e <DIO_ChannelWrite>
 13e:	cf 5f       	subi	r28, 0xFF	; 255
 140:	c8 30       	cpi	r28, 0x08	; 8
 142:	91 f7       	brne	.-28     	; 0x128 <LCD_Write_Lower+0x1e>
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	ff 90       	pop	r15
 14e:	08 95       	ret

00000150 <LCD_RS_Command>:
 150:	ea e6       	ldi	r30, 0x6A	; 106
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	61 81       	ldd	r22, Z+1	; 0x01
 158:	80 81       	ld	r24, Z
 15a:	0e 94 27 02 	call	0x44e	; 0x44e <DIO_ChannelWrite>
 15e:	08 95       	ret

00000160 <LCD_RS_Reg>:
 160:	ea e6       	ldi	r30, 0x6A	; 106
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	61 81       	ldd	r22, Z+1	; 0x01
 168:	80 81       	ld	r24, Z
 16a:	0e 94 27 02 	call	0x44e	; 0x44e <DIO_ChannelWrite>
 16e:	08 95       	ret

00000170 <LCD_Write_Operation>:
}

void LCD_Write_Operation() {
	DIO_ChannelWrite(LCD_ConfigParam.ControlPortId, LCD_ConfigParam.RWPinChannel, 0x00);
 170:	ea e6       	ldi	r30, 0x6A	; 106
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	62 81       	ldd	r22, Z+2	; 0x02
 178:	80 81       	ld	r24, Z
 17a:	0e 94 27 02 	call	0x44e	; 0x44e <DIO_ChannelWrite>
 17e:	08 95       	ret

00000180 <LCD_Enable>:
}

void LCD_Enable() {
	DIO_ChannelWrite(LCD_ConfigParam.ControlPortId, LCD_ConfigParam.EnablePinChannel, 0xff);
 180:	ea e6       	ldi	r30, 0x6A	; 106
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	4f ef       	ldi	r20, 0xFF	; 255
 186:	63 81       	ldd	r22, Z+3	; 0x03
 188:	80 81       	ld	r24, Z
 18a:	0e 94 27 02 	call	0x44e	; 0x44e <DIO_ChannelWrite>
 18e:	08 95       	ret

00000190 <LCD_Disable>:
}

void LCD_Disable() {
	DIO_ChannelWrite(LCD_ConfigParam.ControlPortId, LCD_ConfigParam.EnablePinChannel, 0x00);
 190:	ea e6       	ldi	r30, 0x6A	; 106
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	63 81       	ldd	r22, Z+3	; 0x03
 198:	80 81       	ld	r24, Z
 19a:	0e 94 27 02 	call	0x44e	; 0x44e <DIO_ChannelWrite>
 19e:	08 95       	ret

000001a0 <LCD_Command>:
}

void LCD_Command(uint8 cmnd)
{
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
	LCD_Write_Upper(cmnd) ;
 1a4:	0e 94 65 00 	call	0xca	; 0xca <LCD_Write_Upper>
	LCD_RS_Command();	/* RS=0 command reg. */
 1a8:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_RS_Command>
	LCD_Write_Operation();	/* RW=0 Write operation */
 1ac:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Write_Operation>
	LCD_Enable();	/* Enable pulse */
 1b0:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	00 00       	nop
	_delay_us(1);
	LCD_Disable();
 1b6:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Disable>
 1ba:	82 e4       	ldi	r24, 0x42	; 66
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Command+0x1c>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Command+0x22>
	_delay_us(200);
	LCD_Write_Lower(cmnd) ;
 1c2:	8c 2f       	mov	r24, r28
 1c4:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_Write_Lower>
	LCD_RS_Command();	/* RS=0 command reg. */
 1c8:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_RS_Command>
	LCD_Write_Operation();	/* RW=0 Write operation */
 1cc:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Write_Operation>
	LCD_Enable();	/* Enable pulse */
 1d0:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Enable>
 1d4:	00 00       	nop
	_delay_us(1);
	LCD_Disable();
 1d6:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Disable>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_Command+0x3c>
	_delay_us(2);
}
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <LCD_Char>:

void LCD_Char (uint8 char_data)  /* LCD data write function */
{
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
	LCD_Write_Upper(char_data);
 1e4:	0e 94 65 00 	call	0xca	; 0xca <LCD_Write_Upper>
	LCD_RS_Reg();	/* RS=0 command reg. */
 1e8:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_RS_Reg>
	LCD_Write_Operation();	/* RW=0 Write operation */
 1ec:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Write_Operation>
	LCD_Enable();	/* Enable pulse */
 1f0:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Enable>
 1f4:	00 00       	nop
	_delay_us(1);
	LCD_Disable();
 1f6:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Disable>
 1fa:	82 e4       	ldi	r24, 0x42	; 66
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_Char+0x1c>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_Char+0x22>
	_delay_us(200);			/* Data write delay */
	LCD_Write_Lower(char_data);
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_Write_Lower>
	LCD_RS_Reg();	/* RS=0 command reg. */
 208:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_RS_Reg>
	LCD_Write_Operation();	/* RW=0 Write operation */
 20c:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Write_Operation>
	LCD_Enable();	/* Enable pulse */
 210:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Enable>
 214:	00 00       	nop
	_delay_us(1);
	LCD_Disable();
 216:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Disable>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_Char+0x3c>
	_delay_us(2);
}
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	87 e8       	ldi	r24, 0x87	; 135
 222:	93 e1       	ldi	r25, 0x13	; 19
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_Init+0x4>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_Init+0xa>
 22a:	00 00       	nop

void LCD_Init (void)			/* LCD Initialize function */
{
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command (0X02);
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Command>
	LCD_Command (0x28);		/* Initialization of 16X2 LCD in 8bit mode */
 232:	88 e2       	ldi	r24, 0x28	; 40
 234:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Command>
	LCD_Command (0x0C);		/* Display ON Cursor OFF */
 238:	8c e0       	ldi	r24, 0x0C	; 12
 23a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Command>
	LCD_Command (0x06);		/* Auto Increment cursor */
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Command>
	LCD_Command (0x01);		/* clear display */
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_Init+0x2c>
 24c:	08 95       	ret

0000024e <LCD_String>:
	_delay_us(2);			/* Clear display command delay> 1.63 ms */
}


void LCD_String (uint8 *str)		/* Send string to LCD function */
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 254:	88 81       	ld	r24, Y
 256:	88 23       	and	r24, r24
 258:	31 f0       	breq	.+12     	; 0x266 <LCD_String+0x18>
 25a:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char ((uint8)str[i]);
 25c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_Char>


void LCD_String (uint8 *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 260:	89 91       	ld	r24, Y+
 262:	81 11       	cpse	r24, r1
 264:	fb cf       	rjmp	.-10     	; 0x25c <LCD_String+0xe>
	{
		LCD_Char ((uint8)str[i]);
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <LCD_String_xy>:

void LCD_String_xy (uint8 row, uint8 pos, uint8 *str)  /* Send string to LCD with xy position */
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 272:	81 11       	cpse	r24, r1
 274:	08 c0       	rjmp	.+16     	; 0x286 <LCD_String_xy+0x1a>
 276:	60 31       	cpi	r22, 0x10	; 16
 278:	78 f4       	brcc	.+30     	; 0x298 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 27a:	86 2f       	mov	r24, r22
 27c:	8f 70       	andi	r24, 0x0F	; 15
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Command>
 284:	09 c0       	rjmp	.+18     	; 0x298 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	39 f4       	brne	.+14     	; 0x298 <LCD_String_xy+0x2c>
 28a:	60 31       	cpi	r22, 0x10	; 16
 28c:	28 f4       	brcc	.+10     	; 0x298 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 28e:	86 2f       	mov	r24, r22
 290:	8f 70       	andi	r24, 0x0F	; 15
 292:	80 6c       	ori	r24, 0xC0	; 192
 294:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 298:	ce 01       	movw	r24, r28
 29a:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_String>
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* clear display */
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Command>
 2aa:	08 95       	ret

000002ac <main>:
#include "LCD_Manager.h"
#include "LCD.h"
int main(void)
{
	/*test_KeyPad_Lcd();*/
	DIO_Init(3);
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_Init>
	DIO_Init(2);
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_Init>
	LCD_Init();
 2bc:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Init>
	display_Welcome_screen(3);
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	0e 94 ca 01 	call	0x394	; 0x394 <display_Welcome_screen>
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <main+0x1a>

000002c8 <display_Welcome_once>:
	uint8 second = crt_temp % 10;
	
	char temp[2] = {numbers[first], numbers[second]};
	LCD_String_xy(0,14,temp);
	
}
 2c8:	cf 93       	push	r28
 2ca:	c9 e0       	ldi	r28, 0x09	; 9
 2cc:	8c e1       	ldi	r24, 0x1C	; 28
 2ce:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Command>
 2d2:	87 ea       	ldi	r24, 0xA7	; 167
 2d4:	91 e6       	ldi	r25, 0x61	; 97
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <display_Welcome_once+0xe>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <display_Welcome_once+0x14>
 2dc:	00 00       	nop
 2de:	c1 50       	subi	r28, 0x01	; 1
 2e0:	a9 f7       	brne	.-22     	; 0x2cc <display_Welcome_once+0x4>
 2e2:	c9 e0       	ldi	r28, 0x09	; 9
 2e4:	88 e1       	ldi	r24, 0x18	; 24
 2e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Command>
 2ea:	87 ea       	ldi	r24, 0xA7	; 167
 2ec:	91 e6       	ldi	r25, 0x61	; 97
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <display_Welcome_once+0x26>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <display_Welcome_once+0x2c>
 2f4:	00 00       	nop
 2f6:	c1 50       	subi	r28, 0x01	; 1
 2f8:	a9 f7       	brne	.-22     	; 0x2e4 <display_Welcome_once+0x1c>
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <idle_screen>:
 2fe:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Clear>
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_Char>
 308:	47 e7       	ldi	r20, 0x77	; 119
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_String_xy>
 314:	4e e7       	ldi	r20, 0x7E	; 126
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	6a e0       	ldi	r22, 0x0A	; 10
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_String_xy>
 320:	45 e8       	ldi	r20, 0x85	; 133
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_String_xy>
 32c:	08 95       	ret

0000032e <write_Set_Temp>:

void write_Set_Temp(uint8 set_temp) {
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	00 d0       	rcall	.+0      	; 0x336 <write_Set_Temp+0x8>
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	18 2f       	mov	r17, r24
	LCD_String_xy(0,4,"  ");
 33c:	4b e9       	ldi	r20, 0x9B	; 155
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_String_xy>
	uint8 first = set_temp / 10;
	uint8 second = set_temp % 10;
	
	char temp[2] = {numbers[first], numbers[second]};
 348:	8d ec       	ldi	r24, 0xCD	; 205
 34a:	18 9f       	mul	r17, r24
 34c:	81 2d       	mov	r24, r1
 34e:	11 24       	eor	r1, r1
 350:	86 95       	lsr	r24
 352:	86 95       	lsr	r24
 354:	86 95       	lsr	r24
 356:	e8 2f       	mov	r30, r24
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	e0 5a       	subi	r30, 0xA0	; 160
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	90 81       	ld	r25, Z
 360:	99 83       	std	Y+1, r25	; 0x01
 362:	88 0f       	add	r24, r24
 364:	98 2f       	mov	r25, r24
 366:	99 0f       	add	r25, r25
 368:	99 0f       	add	r25, r25
 36a:	89 0f       	add	r24, r25
 36c:	18 1b       	sub	r17, r24
 36e:	e1 2f       	mov	r30, r17
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	e0 5a       	subi	r30, 0xA0	; 160
 374:	ff 4f       	sbci	r31, 0xFF	; 255
 376:	80 81       	ld	r24, Z
 378:	8a 83       	std	Y+2, r24	; 0x02
	LCD_String_xy(0,4,temp);
 37a:	ae 01       	movw	r20, r28
 37c:	4f 5f       	subi	r20, 0xFF	; 255
 37e:	5f 4f       	sbci	r21, 0xFF	; 255
 380:	64 e0       	ldi	r22, 0x04	; 4
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_String_xy>
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	08 95       	ret

00000394 <display_Welcome_screen>:
#include "LCD_Manager_cfg.h"
#include <string.h>

char* States[4] = {"STANDBY", "OPERATION", "NORMAL", "ERROR"};
char numbers[10] = {'0','1','2','3','4','5','6','7','8','9'};
void display_Welcome_screen(uint8 times) {
 394:	cf 93       	push	r28
 396:	c8 2f       	mov	r28, r24
	LCD_Char(' ');
 398:	80 e2       	ldi	r24, 0x20	; 32
 39a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_Char>
	
	LCD_String_xy(0, 0,"WELCOME");
 39e:	4e e9       	ldi	r20, 0x9E	; 158
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_String_xy>
	while(times > 0){
 3aa:	cc 23       	and	r28, r28
 3ac:	21 f0       	breq	.+8      	; 0x3b6 <display_Welcome_screen+0x22>
		display_Welcome_once();
 3ae:	0e 94 64 01 	call	0x2c8	; 0x2c8 <display_Welcome_once>
		times--;
 3b2:	c1 50       	subi	r28, 0x01	; 1
char numbers[10] = {'0','1','2','3','4','5','6','7','8','9'};
void display_Welcome_screen(uint8 times) {
	LCD_Char(' ');
	
	LCD_String_xy(0, 0,"WELCOME");
	while(times > 0){
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <display_Welcome_screen+0x1a>
		display_Welcome_once();
		times--;
	}
	idle_screen();
 3b6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <idle_screen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ba:	2f e3       	ldi	r18, 0x3F	; 63
 3bc:	8d e0       	ldi	r24, 0x0D	; 13
 3be:	93 e0       	ldi	r25, 0x03	; 3
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <display_Welcome_screen+0x2c>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <display_Welcome_screen+0x36>
 3ca:	00 00       	nop
	_delay_ms(1000);
	write_Set_Temp(7);
 3cc:	87 e0       	ldi	r24, 0x07	; 7
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 97 01 	call	0x32e	; 0x32e <write_Set_Temp>
}
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <DIO_Init>:
        }
    } else {
        Result = DIO_NOK;
    }
    return Result;
}
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	84 30       	cpi	r24, 0x04	; 4
 3de:	98 f5       	brcc	.+102    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	fc 01       	movw	r30, r24
 3e4:	e3 54       	subi	r30, 0x43	; 67
 3e6:	ff 4f       	sbci	r31, 0xFF	; 255
 3e8:	a0 81       	ld	r26, Z
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	ed 01       	movw	r28, r26
 3ee:	21 97       	sbiw	r28, 0x01	; 1
 3f0:	fc 01       	movw	r30, r24
 3f2:	ee 0f       	add	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	e8 0f       	add	r30, r24
 3f8:	f9 1f       	adc	r31, r25
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	ef 53       	subi	r30, 0x3F	; 63
 408:	ff 4f       	sbci	r31, 0xFF	; 255
 40a:	48 e0       	ldi	r20, 0x08	; 8
 40c:	88 81       	ld	r24, Y
 40e:	30 81       	ld	r19, Z
 410:	93 2f       	mov	r25, r19
 412:	90 95       	com	r25
 414:	89 23       	and	r24, r25
 416:	88 83       	st	Y, r24
 418:	28 81       	ld	r18, Y
 41a:	81 81       	ldd	r24, Z+1	; 0x01
 41c:	53 2f       	mov	r21, r19
 41e:	58 23       	and	r21, r24
 420:	25 2b       	or	r18, r21
 422:	28 83       	st	Y, r18
 424:	2c 91       	ld	r18, X
 426:	98 2b       	or	r25, r24
 428:	92 23       	and	r25, r18
 42a:	9c 93       	st	X, r25
 42c:	9c 91       	ld	r25, X
 42e:	22 81       	ldd	r18, Z+2	; 0x02
 430:	23 23       	and	r18, r19
 432:	80 95       	com	r24
 434:	82 23       	and	r24, r18
 436:	89 2b       	or	r24, r25
 438:	8c 93       	st	X, r24
 43a:	41 50       	subi	r20, 0x01	; 1
 43c:	33 96       	adiw	r30, 0x03	; 3
 43e:	41 11       	cpse	r20, r1
 440:	e5 cf       	rjmp	.-54     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	01 c0       	rjmp	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <DIO_ChannelWrite>:


DIO_CheckType DIO_ChannelWrite(uint8 PortId, uint8 ChannelId, uint8 Data) {
    /*Add your code*/
    DIO_CheckType Result;
    if (PortId < DIO_NUM_OF_PORTS) {
 44e:	84 30       	cpi	r24, 0x04	; 4
 450:	d0 f4       	brcc	.+52     	; 0x486 <DIO_ChannelWrite+0x38>
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
 452:	68 30       	cpi	r22, 0x08	; 8
 454:	d0 f4       	brcc	.+52     	; 0x48a <DIO_ChannelWrite+0x3c>
            PORT_REG(PortId) &= ~(1 << ChannelId);
 456:	e8 2f       	mov	r30, r24
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	e3 54       	subi	r30, 0x43	; 67
 45c:	ff 4f       	sbci	r31, 0xFF	; 255
 45e:	e0 81       	ld	r30, Z
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	20 81       	ld	r18, Z
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_ChannelWrite+0x20>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_ChannelWrite+0x1c>
 472:	98 2f       	mov	r25, r24
 474:	90 95       	com	r25
 476:	92 23       	and	r25, r18
 478:	90 83       	st	Z, r25
            PORT_REG(PortId) |= (1 << ChannelId) & Data;
 47a:	90 81       	ld	r25, Z
 47c:	84 23       	and	r24, r20
 47e:	89 2b       	or	r24, r25
 480:	80 83       	st	Z, r24
            Result = DIO_OK;
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 95       	ret
        } else{
            Result = DIO_NOK;
        }
    } else {
        Result = DIO_NOK;
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	08 95       	ret
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
            PORT_REG(PortId) &= ~(1 << ChannelId);
            PORT_REG(PortId) |= (1 << ChannelId) & Data;
            Result = DIO_OK;
        } else{
            Result = DIO_NOK;
 48a:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        Result = DIO_NOK;
    }
    return Result;
}
 48c:	08 95       	ret

0000048e <_exit>:
 48e:	f8 94       	cli

00000490 <__stop_program>:
 490:	ff cf       	rjmp	.-2      	; 0x490 <__stop_program>

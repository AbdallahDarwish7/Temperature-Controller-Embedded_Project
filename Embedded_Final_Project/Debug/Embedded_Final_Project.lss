
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000570  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00000570  000005e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a20  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b21  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ad1  00000000  00000000  00002dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  000038a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006d7  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c72  00000000  00000000  000042ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 31       	cpi	r26, 0x18	; 24
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 17 02 	call	0x42e	; 0x42e <main>
  7a:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initialize_KeyPad>:
#include "DIO.h"
#include "KeyPad.h"
#include "KeyPad_Cfg.h"
#include "LCD.h"

void initialize_KeyPad(void) {
  82:	ef 92       	push	r14
  84:	ff 92       	push	r15
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	c2 ea       	ldi	r28, 0xA2	; 162
  8e:	d0 e0       	ldi	r29, 0x00	; 0
  90:	0f 2e       	mov	r0, r31
  92:	f6 ea       	ldi	r31, 0xA6	; 166
  94:	ef 2e       	mov	r14, r31
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	ff 2e       	mov	r15, r31
  9a:	f0 2d       	mov	r31, r0
	uint8 r;
	for(r=0;r<4;r++)
	{
		DIO_ChannelWrite(KeyPad_ConfigParam.RowsPortId,KeyPad_ConfigParam.RowsPinsChannels[r], 0xff);
  9c:	10 91 a1 00 	lds	r17, 0x00A1	; 0x8000a1 <KeyPad_ConfigParam+0x4>
  a0:	69 91       	ld	r22, Y+
  a2:	4f ef       	ldi	r20, 0xFF	; 255
  a4:	81 2f       	mov	r24, r17
  a6:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_ChannelWrite>
#include "KeyPad_Cfg.h"
#include "LCD.h"

void initialize_KeyPad(void) {
	uint8 r;
	for(r=0;r<4;r++)
  aa:	ce 15       	cp	r28, r14
  ac:	df 05       	cpc	r29, r15
  ae:	c1 f7       	brne	.-16     	; 0xa0 <initialize_KeyPad+0x1e>
	{
		DIO_ChannelWrite(KeyPad_ConfigParam.RowsPortId,KeyPad_ConfigParam.RowsPinsChannels[r], 0xff);
	}
}
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	1f 91       	pop	r17
  b6:	ff 90       	pop	r15
  b8:	ef 90       	pop	r14
  ba:	08 95       	ret

000000bc <pressed_Key>:

uint8 pressed_Key(void){
  bc:	4f 92       	push	r4
  be:	5f 92       	push	r5
  c0:	6f 92       	push	r6
  c2:	7f 92       	push	r7
  c4:	8f 92       	push	r8
  c6:	9f 92       	push	r9
  c8:	af 92       	push	r10
  ca:	bf 92       	push	r11
  cc:	cf 92       	push	r12
  ce:	df 92       	push	r13
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	0f 2e       	mov	r0, r31
  de:	fe e9       	ldi	r31, 0x9E	; 158
  e0:	af 2e       	mov	r10, r31
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	bf 2e       	mov	r11, r31
  e6:	f0 2d       	mov	r31, r0

	uint8 c;
	uint8 r;
	uint8* row; 
	
	uint8 key = 0xff;
  e8:	55 24       	eor	r5, r5
  ea:	5a 94       	dec	r5
	for(c=0;c<3;c++)
  ec:	71 2c       	mov	r7, r1
	{
		DIO_ChannelDir(KeyPad_ConfigParam.ColsPortId,KeyPad_ConfigParam.ColsPinsChannels[c], 0xff);
  ee:	0f 2e       	mov	r0, r31
  f0:	fd e9       	ldi	r31, 0x9D	; 157
  f2:	8f 2e       	mov	r8, r31
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	9f 2e       	mov	r9, r31
  f8:	f0 2d       	mov	r31, r0
  fa:	f4 01       	movw	r30, r8
  fc:	40 80       	ld	r4, Z
  fe:	0f 2e       	mov	r0, r31
 100:	f6 ea       	ldi	r31, 0xA6	; 166
 102:	cf 2e       	mov	r12, r31
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	df 2e       	mov	r13, r31
 108:	f0 2d       	mov	r31, r0
 10a:	f5 01       	movw	r30, r10
 10c:	61 90       	ld	r6, Z+
 10e:	5f 01       	movw	r10, r30
 110:	4f ef       	ldi	r20, 0xFF	; 255
 112:	66 2d       	mov	r22, r6
 114:	84 2d       	mov	r24, r4
 116:	0e 94 55 02 	call	0x4aa	; 0x4aa <DIO_ChannelDir>
 11a:	c2 ea       	ldi	r28, 0xA2	; 162
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	f7 2c       	mov	r15, r7
		for(r=0;r<4;r++)
		{
			DIO_ChannelRead(KeyPad_ConfigParam.RowsPortId, KeyPad_ConfigParam.RowsPinsChannels[r], row);
 120:	f4 01       	movw	r30, r8
 122:	e4 80       	ldd	r14, Z+4	; 0x04
 124:	69 91       	ld	r22, Y+
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	10 e0       	ldi	r17, 0x00	; 0
 12a:	a8 01       	movw	r20, r16
 12c:	8e 2d       	mov	r24, r14
 12e:	0e 94 95 02 	call	0x52a	; 0x52a <DIO_ChannelRead>
			if((*row == 0x00))
 132:	f8 01       	movw	r30, r16
 134:	80 81       	ld	r24, Z
 136:	81 11       	cpse	r24, r1
 138:	01 c0       	rjmp	.+2      	; 0x13c <pressed_Key+0x80>
			{
				key =  (r*3 +c);
 13a:	5f 2c       	mov	r5, r15
 13c:	f3 e0       	ldi	r31, 0x03	; 3
 13e:	ff 0e       	add	r15, r31
	
	uint8 key = 0xff;
	for(c=0;c<3;c++)
	{
		DIO_ChannelDir(KeyPad_ConfigParam.ColsPortId,KeyPad_ConfigParam.ColsPinsChannels[c], 0xff);
		for(r=0;r<4;r++)
 140:	cc 15       	cp	r28, r12
 142:	dd 05       	cpc	r29, r13
 144:	79 f7       	brne	.-34     	; 0x124 <pressed_Key+0x68>
			if((*row == 0x00))
			{
				key =  (r*3 +c);
			}
		}
		DIO_ChannelDir(KeyPad_ConfigParam.ColsPortId,KeyPad_ConfigParam.ColsPinsChannels[c], 0x00);
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	66 2d       	mov	r22, r6
 14a:	84 2d       	mov	r24, r4
 14c:	0e 94 55 02 	call	0x4aa	; 0x4aa <DIO_ChannelDir>
	uint8 c;
	uint8 r;
	uint8* row; 
	
	uint8 key = 0xff;
	for(c=0;c<3;c++)
 150:	73 94       	inc	r7
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	78 12       	cpse	r7, r24
 156:	d9 cf       	rjmp	.-78     	; 0x10a <pressed_Key+0x4e>
		}
		DIO_ChannelDir(KeyPad_ConfigParam.ColsPortId,KeyPad_ConfigParam.ColsPinsChannels[c], 0x00);
		
	}
	return key;//Indicate No key pressed*
}
 158:	85 2d       	mov	r24, r5
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	df 90       	pop	r13
 168:	cf 90       	pop	r12
 16a:	bf 90       	pop	r11
 16c:	af 90       	pop	r10
 16e:	9f 90       	pop	r9
 170:	8f 90       	pop	r8
 172:	7f 90       	pop	r7
 174:	6f 90       	pop	r6
 176:	5f 90       	pop	r5
 178:	4f 90       	pop	r4
 17a:	08 95       	ret

0000017c <test_KeyPad_Lcd>:


void test_KeyPad_Lcd(void) {
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	68 97       	sbiw	r28, 0x18	; 24
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
	unsigned char loop;
	uint8* Characters[12] = {"*", "0", "#", "7", "8", "9", "4", "5", "6", "1", "2", "3"};
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	e0 e6       	ldi	r30, 0x60	; 96
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	de 01       	movw	r26, r28
 198:	11 96       	adiw	r26, 0x01	; 1
 19a:	01 90       	ld	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	8a 95       	dec	r24
 1a0:	e1 f7       	brne	.-8      	; 0x19a <test_KeyPad_Lcd+0x1e>

	DIO_Init(2);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_Init>
	DIO_Init(3);
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_Init>
	DIO_Init(1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_Init>
	initialize_KeyPad();
 1b4:	0e 94 41 00 	call	0x82	; 0x82 <initialize_KeyPad>
	LCD_Init();
 1b8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Init>
	LCD_Char(" ");
 1bc:	8e e7       	ldi	r24, 0x7E	; 126
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Char>
	LCD_String_xy(0, 0, "HELLO: ");
 1c4:	48 e7       	ldi	r20, 0x78	; 120
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_String_xy>
	LCD_String_xy(0, (uint8)10,"KIMO");
 1d0:	40 e8       	ldi	r20, 0x80	; 128
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	6a e0       	ldi	r22, 0x0A	; 10
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_String_xy>
	LCD_Command(0xc0);
 1dc:	80 ec       	ldi	r24, 0xC0	; 192
 1de:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Command>
	uint8 key;
	while(1)
	{
		key = pressed_Key();
 1e2:	0e 94 5e 00 	call	0xbc	; 0xbc <pressed_Key>
		if(key != 0xff){
 1e6:	8f 3f       	cpi	r24, 0xFF	; 255
 1e8:	e1 f3       	breq	.-8      	; 0x1e2 <test_KeyPad_Lcd+0x66>
			LCD_String_xy(1, 0, Characters[key]);
 1ea:	e8 2f       	mov	r30, r24
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	8c 0f       	add	r24, r28
 1f8:	9d 1f       	adc	r25, r29
 1fa:	e8 0f       	add	r30, r24
 1fc:	f9 1f       	adc	r31, r25
 1fe:	40 81       	ld	r20, Z
 200:	51 81       	ldd	r21, Z+1	; 0x01
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_String_xy>
 20a:	eb cf       	rjmp	.-42     	; 0x1e2 <test_KeyPad_Lcd+0x66>

0000020c <CheckBit>:
void LCD_RS_Reg() {
	DIO_ChannelWrite(LCD_ConfigParam.ControlPortId, LCD_ConfigParam.RSPinChannel, 0xff);
}

void LCD_Read_Operation() {
	DIO_ChannelWrite(LCD_ConfigParam.ControlPortId, LCD_ConfigParam.RWPinChannel, 0xff);
 20c:	e6 2f       	mov	r30, r22
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ea 55       	subi	r30, 0x5A	; 90
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	e5 81       	ldd	r30, Z+5	; 0x05
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <LCD_ConfigParam+0x4>
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	af 01       	movw	r20, r30
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	e4 0f       	add	r30, r20
 226:	f5 1f       	adc	r31, r21
 228:	a9 01       	movw	r20, r18
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	24 0f       	add	r18, r20
 230:	35 1f       	adc	r19, r21
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	e2 0f       	add	r30, r18
 240:	f3 1f       	adc	r31, r19
 242:	e9 54       	subi	r30, 0x49	; 73
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	90 81       	ld	r25, Z
 248:	98 23       	and	r25, r24
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	09 f4       	brne	.+2      	; 0x250 <CheckBit+0x44>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	81 95       	neg	r24
 252:	08 95       	ret

00000254 <LCD_Write_Upper>:
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	80 7f       	andi	r24, 0xF0	; 240
 260:	f8 2e       	mov	r15, r24
 262:	0b ea       	ldi	r16, 0xAB	; 171
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	c0 e0       	ldi	r28, 0x00	; 0
 268:	d0 91 aa 00 	lds	r29, 0x00AA	; 0x8000aa <LCD_ConfigParam+0x4>
 26c:	6c 2f       	mov	r22, r28
 26e:	8f 2d       	mov	r24, r15
 270:	0e 94 06 01 	call	0x20c	; 0x20c <CheckBit>
 274:	f8 01       	movw	r30, r16
 276:	61 91       	ld	r22, Z+
 278:	8f 01       	movw	r16, r30
 27a:	48 2f       	mov	r20, r24
 27c:	8d 2f       	mov	r24, r29
 27e:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_ChannelWrite>
 282:	cf 5f       	subi	r28, 0xFF	; 255
 284:	c8 30       	cpi	r28, 0x08	; 8
 286:	91 f7       	brne	.-28     	; 0x26c <LCD_Write_Upper+0x18>
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	08 95       	ret

00000294 <LCD_Write_Lower>:
 294:	ff 92       	push	r15
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	f8 2e       	mov	r15, r24
 2a0:	ff 0c       	add	r15, r15
 2a2:	ff 0c       	add	r15, r15
 2a4:	ff 0c       	add	r15, r15
 2a6:	ff 0c       	add	r15, r15
 2a8:	0b ea       	ldi	r16, 0xAB	; 171
 2aa:	10 e0       	ldi	r17, 0x00	; 0
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	d0 91 aa 00 	lds	r29, 0x00AA	; 0x8000aa <LCD_ConfigParam+0x4>
 2b2:	6c 2f       	mov	r22, r28
 2b4:	8f 2d       	mov	r24, r15
 2b6:	0e 94 06 01 	call	0x20c	; 0x20c <CheckBit>
 2ba:	f8 01       	movw	r30, r16
 2bc:	61 91       	ld	r22, Z+
 2be:	8f 01       	movw	r16, r30
 2c0:	48 2f       	mov	r20, r24
 2c2:	8d 2f       	mov	r24, r29
 2c4:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_ChannelWrite>
 2c8:	cf 5f       	subi	r28, 0xFF	; 255
 2ca:	c8 30       	cpi	r28, 0x08	; 8
 2cc:	91 f7       	brne	.-28     	; 0x2b2 <LCD_Write_Lower+0x1e>
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	ff 90       	pop	r15
 2d8:	08 95       	ret

000002da <LCD_RS_Command>:
 2da:	e6 ea       	ldi	r30, 0xA6	; 166
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	61 81       	ldd	r22, Z+1	; 0x01
 2e2:	80 81       	ld	r24, Z
 2e4:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_ChannelWrite>
 2e8:	08 95       	ret

000002ea <LCD_RS_Reg>:
 2ea:	e6 ea       	ldi	r30, 0xA6	; 166
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	4f ef       	ldi	r20, 0xFF	; 255
 2f0:	61 81       	ldd	r22, Z+1	; 0x01
 2f2:	80 81       	ld	r24, Z
 2f4:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_ChannelWrite>
 2f8:	08 95       	ret

000002fa <LCD_Write_Operation>:
}

void LCD_Write_Operation() {
	DIO_ChannelWrite(LCD_ConfigParam.ControlPortId, LCD_ConfigParam.RWPinChannel, 0x00);
 2fa:	e6 ea       	ldi	r30, 0xA6	; 166
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	62 81       	ldd	r22, Z+2	; 0x02
 302:	80 81       	ld	r24, Z
 304:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_ChannelWrite>
 308:	08 95       	ret

0000030a <LCD_Enable>:
}

void LCD_Enable() {
	DIO_ChannelWrite(LCD_ConfigParam.ControlPortId, LCD_ConfigParam.EnablePinChannel, 0xff);
 30a:	e6 ea       	ldi	r30, 0xA6	; 166
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	4f ef       	ldi	r20, 0xFF	; 255
 310:	63 81       	ldd	r22, Z+3	; 0x03
 312:	80 81       	ld	r24, Z
 314:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_ChannelWrite>
 318:	08 95       	ret

0000031a <LCD_Disable>:
}

void LCD_Disable() {
	DIO_ChannelWrite(LCD_ConfigParam.ControlPortId, LCD_ConfigParam.EnablePinChannel, 0x00);
 31a:	e6 ea       	ldi	r30, 0xA6	; 166
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	63 81       	ldd	r22, Z+3	; 0x03
 322:	80 81       	ld	r24, Z
 324:	0e 94 75 02 	call	0x4ea	; 0x4ea <DIO_ChannelWrite>
 328:	08 95       	ret

0000032a <LCD_Command>:
}

void LCD_Command(uint8 cmnd)
{
 32a:	cf 93       	push	r28
 32c:	c8 2f       	mov	r28, r24
	LCD_Write_Upper(cmnd) ;
 32e:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_Write_Upper>
	LCD_RS_Command();	/* RS=0 command reg. */
 332:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_RS_Command>
	LCD_Write_Operation();	/* RW=0 Write operation */
 336:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Write_Operation>
	LCD_Enable();	/* Enable pulse */
 33a:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33e:	00 00       	nop
	_delay_us(1);
	LCD_Disable();
 340:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Disable>
 344:	82 e4       	ldi	r24, 0x42	; 66
 346:	8a 95       	dec	r24
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD_Command+0x1c>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_Command+0x22>
	_delay_us(200);
	LCD_Write_Lower(cmnd) ;
 34c:	8c 2f       	mov	r24, r28
 34e:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_Write_Lower>
	LCD_RS_Command();	/* RS=0 command reg. */
 352:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_RS_Command>
	LCD_Write_Operation();	/* RW=0 Write operation */
 356:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Write_Operation>
	LCD_Enable();	/* Enable pulse */
 35a:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Enable>
 35e:	00 00       	nop
	_delay_us(1);
	LCD_Disable();
 360:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Disable>
 364:	00 c0       	rjmp	.+0      	; 0x366 <LCD_Command+0x3c>
	_delay_us(2);
}
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <LCD_Char>:

void LCD_Char (uint8 char_data)  /* LCD data write function */
{
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
	LCD_Write_Upper(char_data);
 36e:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_Write_Upper>
	LCD_RS_Reg();	/* RS=0 command reg. */
 372:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_RS_Reg>
	LCD_Write_Operation();	/* RW=0 Write operation */
 376:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Write_Operation>
	LCD_Enable();	/* Enable pulse */
 37a:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Enable>
 37e:	00 00       	nop
	_delay_us(1);
	LCD_Disable();
 380:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Disable>
 384:	82 e4       	ldi	r24, 0x42	; 66
 386:	8a 95       	dec	r24
 388:	f1 f7       	brne	.-4      	; 0x386 <LCD_Char+0x1c>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_Char+0x22>
	_delay_us(200);			/* Data write delay */
	LCD_Write_Lower(char_data);
 38c:	8c 2f       	mov	r24, r28
 38e:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_Write_Lower>
	LCD_RS_Reg();	/* RS=0 command reg. */
 392:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_RS_Reg>
	LCD_Write_Operation();	/* RW=0 Write operation */
 396:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Write_Operation>
	LCD_Enable();	/* Enable pulse */
 39a:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_Enable>
 39e:	00 00       	nop
	_delay_us(1);
	LCD_Disable();
 3a0:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Disable>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_Char+0x3c>
	_delay_us(2);
}
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3aa:	87 e8       	ldi	r24, 0x87	; 135
 3ac:	93 e1       	ldi	r25, 0x13	; 19
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCD_Init+0x4>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_Init+0xa>
 3b4:	00 00       	nop

void LCD_Init (void)			/* LCD Initialize function */
{
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command (0X02);
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Command>
	LCD_Command (0x28);		/* Initialization of 16X2 LCD in 8bit mode */
 3bc:	88 e2       	ldi	r24, 0x28	; 40
 3be:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Command>
	LCD_Command (0x0C);		/* Display ON Cursor OFF */
 3c2:	8c e0       	ldi	r24, 0x0C	; 12
 3c4:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Command>
	LCD_Command (0x06);		/* Auto Increment cursor */
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Command>
	LCD_Command (0x01);		/* clear display */
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_Init+0x2c>
 3d6:	08 95       	ret

000003d8 <LCD_String>:
	_delay_us(2);			/* Clear display command delay> 1.63 ms */
}


void LCD_String (uint8 *str)		/* Send string to LCD function */
{
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 3de:	88 81       	ld	r24, Y
 3e0:	88 23       	and	r24, r24
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <LCD_String+0x18>
 3e4:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char ((uint8)str[i]);
 3e6:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Char>


void LCD_String (uint8 *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 3ea:	89 91       	ld	r24, Y+
 3ec:	81 11       	cpse	r24, r1
 3ee:	fb cf       	rjmp	.-10     	; 0x3e6 <LCD_String+0xe>
	{
		LCD_Char ((uint8)str[i]);
	}
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <LCD_String_xy>:

void LCD_String_xy (uint8 row, uint8 pos, uint8 *str)  /* Send string to LCD with xy position */
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 3fc:	81 11       	cpse	r24, r1
 3fe:	08 c0       	rjmp	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 400:	60 31       	cpi	r22, 0x10	; 16
 402:	78 f4       	brcc	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 404:	86 2f       	mov	r24, r22
 406:	8f 70       	andi	r24, 0x0F	; 15
 408:	80 68       	ori	r24, 0x80	; 128
 40a:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Command>
 40e:	09 c0       	rjmp	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	else if (row == (uint8)1 && pos<(uint8)16)
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	39 f4       	brne	.+14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 414:	60 31       	cpi	r22, 0x10	; 16
 416:	28 f4       	brcc	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 418:	86 2f       	mov	r24, r22
 41a:	8f 70       	andi	r24, 0x0F	; 15
 41c:	80 6c       	ori	r24, 0xC0	; 192
 41e:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 422:	ce 01       	movw	r24, r28
 424:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LCD_String>
}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "KeyPad.h"
int main(void)
{
	test_KeyPad_Lcd();
 42e:	0e 94 be 00 	call	0x17c	; 0x17c <test_KeyPad_Lcd>
 432:	ff cf       	rjmp	.-2      	; 0x432 <main+0x4>

00000434 <DIO_Init>:
                PORTB_BASE_ADDRESS,
                PORTC_BASE_ADDRESS,
                PORTD_BASE_ADDRESS
        };

DIO_CheckType DIO_Init(uint8 PortId) {
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
    uint8 Loop;
    DIO_CheckType Result;
    /*verify Port Id*/
    if (PortId < NUM_OF_PORTS) {
 438:	84 30       	cpi	r24, 0x04	; 4
 43a:	98 f5       	brcc	.+102    	; 0x4a2 <DIO_Init+0x6e>
        for (Loop = 0; Loop < DIO_NUM_OF_PORT_CHANNELS; ++Loop) {
            /*init port direction for the masked pins*/
            DDR_REG(PortId) &= ~(DIO_ConfigParam[PortId][Loop].PortMask);
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	fc 01       	movw	r30, r24
 440:	ed 54       	subi	r30, 0x4D	; 77
 442:	ff 4f       	sbci	r31, 0xFF	; 255
 444:	a0 81       	ld	r26, Z
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	ed 01       	movw	r28, r26
 44a:	21 97       	sbiw	r28, 0x01	; 1
 44c:	fc 01       	movw	r30, r24
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	e8 0f       	add	r30, r24
 454:	f9 1f       	adc	r31, r25
 456:	ee 0f       	add	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	e9 54       	subi	r30, 0x49	; 73
 464:	ff 4f       	sbci	r31, 0xFF	; 255
            DDR_REG(PortId) |= DIO_ConfigParam[PortId][Loop].PortMask & DIO_ConfigParam[PortId][Loop].PortDirection;
            /*init pull up resistor in case of input direction only*/
            PORT_REG(PortId) &= (~(DIO_ConfigParam[PortId][Loop].PortMask)) | (DIO_ConfigParam[PortId][Loop].PortDirection);
 466:	48 e0       	ldi	r20, 0x08	; 8
    DIO_CheckType Result;
    /*verify Port Id*/
    if (PortId < NUM_OF_PORTS) {
        for (Loop = 0; Loop < DIO_NUM_OF_PORT_CHANNELS; ++Loop) {
            /*init port direction for the masked pins*/
            DDR_REG(PortId) &= ~(DIO_ConfigParam[PortId][Loop].PortMask);
 468:	88 81       	ld	r24, Y
 46a:	30 81       	ld	r19, Z
 46c:	93 2f       	mov	r25, r19
 46e:	90 95       	com	r25
 470:	89 23       	and	r24, r25
 472:	88 83       	st	Y, r24
            DDR_REG(PortId) |= DIO_ConfigParam[PortId][Loop].PortMask & DIO_ConfigParam[PortId][Loop].PortDirection;
 474:	28 81       	ld	r18, Y
 476:	81 81       	ldd	r24, Z+1	; 0x01
 478:	53 2f       	mov	r21, r19
 47a:	58 23       	and	r21, r24
 47c:	25 2b       	or	r18, r21
 47e:	28 83       	st	Y, r18
            /*init pull up resistor in case of input direction only*/
            PORT_REG(PortId) &= (~(DIO_ConfigParam[PortId][Loop].PortMask)) | (DIO_ConfigParam[PortId][Loop].PortDirection);
 480:	2c 91       	ld	r18, X
 482:	98 2b       	or	r25, r24
 484:	92 23       	and	r25, r18
 486:	9c 93       	st	X, r25
            PORT_REG(PortId) |= DIO_ConfigParam[PortId][Loop].PortMask &
 488:	9c 91       	ld	r25, X
 48a:	22 81       	ldd	r18, Z+2	; 0x02
 48c:	23 23       	and	r18, r19
 48e:	80 95       	com	r24
 490:	82 23       	and	r24, r18
 492:	89 2b       	or	r24, r25
 494:	8c 93       	st	X, r24
 496:	41 50       	subi	r20, 0x01	; 1
 498:	33 96       	adiw	r30, 0x03	; 3
DIO_CheckType DIO_Init(uint8 PortId) {
    uint8 Loop;
    DIO_CheckType Result;
    /*verify Port Id*/
    if (PortId < NUM_OF_PORTS) {
        for (Loop = 0; Loop < DIO_NUM_OF_PORT_CHANNELS; ++Loop) {
 49a:	41 11       	cpse	r20, r1
 49c:	e5 cf       	rjmp	.-54     	; 0x468 <DIO_Init+0x34>
            /*init pull up resistor in case of input direction only*/
            PORT_REG(PortId) &= (~(DIO_ConfigParam[PortId][Loop].PortMask)) | (DIO_ConfigParam[PortId][Loop].PortDirection);
            PORT_REG(PortId) |= DIO_ConfigParam[PortId][Loop].PortMask &
                                ((~DIO_ConfigParam[PortId][Loop].PortDirection) & DIO_ConfigParam[PortId][Loop].IsPullupResistorUsed);
        }
        Result = DIO_OK;
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <DIO_Init+0x70>
    } else {
        /*invalid port*/
        Result = DIO_NOK;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
    }
    return Result;
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <DIO_ChannelDir>:

DIO_CheckType DIO_ChannelDir(uint8 PortId, uint8 ChannelId, uint8 Direction) {
    DIO_CheckType Result;
    if (PortId < DIO_NUM_OF_PORTS) {
 4aa:	84 30       	cpi	r24, 0x04	; 4
 4ac:	d0 f4       	brcc	.+52     	; 0x4e2 <DIO_ChannelDir+0x38>
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
 4ae:	68 30       	cpi	r22, 0x08	; 8
 4b0:	d0 f4       	brcc	.+52     	; 0x4e6 <DIO_ChannelDir+0x3c>
            DDR_REG(PortId) &= ~(1 << ChannelId);
 4b2:	e8 2f       	mov	r30, r24
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	ed 54       	subi	r30, 0x4D	; 77
 4b8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ba:	e0 81       	ld	r30, Z
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	22 91       	ld	r18, -Z
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_ChannelDir+0x20>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_ChannelDir+0x1c>
 4ce:	98 2f       	mov	r25, r24
 4d0:	90 95       	com	r25
 4d2:	92 23       	and	r25, r18
 4d4:	90 83       	st	Z, r25
            DDR_REG(PortId) |= ((1 << ChannelId) & Direction);
 4d6:	90 81       	ld	r25, Z
 4d8:	84 23       	and	r24, r20
 4da:	89 2b       	or	r24, r25
 4dc:	80 83       	st	Z, r24
            Result = DIO_OK;
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	08 95       	ret
        } else{
            Result = DIO_NOK;
        }
    } else {
        Result = DIO_NOK;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	08 95       	ret
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
            DDR_REG(PortId) &= ~(1 << ChannelId);
            DDR_REG(PortId) |= ((1 << ChannelId) & Direction);
            Result = DIO_OK;
        } else{
            Result = DIO_NOK;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        Result = DIO_NOK;
    }
    return Result;
}
 4e8:	08 95       	ret

000004ea <DIO_ChannelWrite>:


DIO_CheckType DIO_ChannelWrite(uint8 PortId, uint8 ChannelId, uint8 Data) {
    /*Add your code*/
    DIO_CheckType Result;
    if (PortId < DIO_NUM_OF_PORTS) {
 4ea:	84 30       	cpi	r24, 0x04	; 4
 4ec:	d0 f4       	brcc	.+52     	; 0x522 <DIO_ChannelWrite+0x38>
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
 4ee:	68 30       	cpi	r22, 0x08	; 8
 4f0:	d0 f4       	brcc	.+52     	; 0x526 <DIO_ChannelWrite+0x3c>
            PORT_REG(PortId) &= ~(1 << ChannelId);
 4f2:	e8 2f       	mov	r30, r24
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	ed 54       	subi	r30, 0x4D	; 77
 4f8:	ff 4f       	sbci	r31, 0xFF	; 255
 4fa:	e0 81       	ld	r30, Z
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	20 81       	ld	r18, Z
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_ChannelWrite+0x20>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	6a 95       	dec	r22
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_ChannelWrite+0x1c>
 50e:	98 2f       	mov	r25, r24
 510:	90 95       	com	r25
 512:	92 23       	and	r25, r18
 514:	90 83       	st	Z, r25
            PORT_REG(PortId) |= (1 << ChannelId) & Data;
 516:	90 81       	ld	r25, Z
 518:	84 23       	and	r24, r20
 51a:	89 2b       	or	r24, r25
 51c:	80 83       	st	Z, r24
            Result = DIO_OK;
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	08 95       	ret
        } else{
            Result = DIO_NOK;
        }
    } else {
        Result = DIO_NOK;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	08 95       	ret
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
            PORT_REG(PortId) &= ~(1 << ChannelId);
            PORT_REG(PortId) |= (1 << ChannelId) & Data;
            Result = DIO_OK;
        } else{
            Result = DIO_NOK;
 526:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        Result = DIO_NOK;
    }
    return Result;
}
 528:	08 95       	ret

0000052a <DIO_ChannelRead>:


DIO_CheckType DIO_ChannelRead(uint8 PortId, uint8 ChannelId, uint8 *DataPtr) {
    DIO_CheckType Result;
    if (PortId < DIO_NUM_OF_PORTS) {
 52a:	84 30       	cpi	r24, 0x04	; 4
 52c:	d8 f4       	brcc	.+54     	; 0x564 <DIO_ChannelRead+0x3a>
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
 52e:	68 30       	cpi	r22, 0x08	; 8
 530:	d8 f4       	brcc	.+54     	; 0x568 <DIO_ChannelRead+0x3e>
            if ((1 << ChannelId) & PIN_REG(PortId)) {
 532:	e8 2f       	mov	r30, r24
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	ed 54       	subi	r30, 0x4D	; 77
 538:	ff 4f       	sbci	r31, 0xFF	; 255
 53a:	e0 81       	ld	r30, Z
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	32 97       	sbiw	r30, 0x02	; 2
 540:	80 81       	ld	r24, Z
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_ChannelRead+0x20>
 546:	95 95       	asr	r25
 548:	87 95       	ror	r24
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_ChannelRead+0x1c>
 54e:	80 ff       	sbrs	r24, 0
 550:	05 c0       	rjmp	.+10     	; 0x55c <DIO_ChannelRead+0x32>
                *DataPtr = (uint8)0xff;
 552:	8f ef       	ldi	r24, 0xFF	; 255
 554:	fa 01       	movw	r30, r20
 556:	80 83       	st	Z, r24
            } else {
                *DataPtr = (uint8)0x00;
            }
            Result = DIO_OK;
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	08 95       	ret
    if (PortId < DIO_NUM_OF_PORTS) {
        if (ChannelId < DIO_NUM_OF_PORT_CHANNELS){
            if ((1 << ChannelId) & PIN_REG(PortId)) {
                *DataPtr = (uint8)0xff;
            } else {
                *DataPtr = (uint8)0x00;
 55c:	fa 01       	movw	r30, r20
 55e:	10 82       	st	Z, r1
            }
            Result = DIO_OK;
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	08 95       	ret
        } else{
            Result = DIO_NOK;
        }
    } else {
        Result = DIO_NOK;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	08 95       	ret
            } else {
                *DataPtr = (uint8)0x00;
            }
            Result = DIO_OK;
        } else{
            Result = DIO_NOK;
 568:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        Result = DIO_NOK;
    }
    return Result;
}
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
